
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.io.IOException;
import javax.swing.JOptionPane;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author g
 */
public class StudentDB extends javax.swing.JFrame {
    private final String STUDENT_PATH = "./studentBase/";
    private ArrayList<StudentIO> StudentRecords = new ArrayList<StudentIO>();
    /**
     * Creates new form StudentDB
     */
    public StudentDB() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        View = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        StudentDB = new javax.swing.JTable();
        Search = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Exit = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setTitle("Student Listings");

        View.setText("View");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        StudentDB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID #", "First Name", "Last Name", "Major"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        StudentDB.setColumnSelectionAllowed(true);
        StudentDB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        StudentDB.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(StudentDB);
        StudentDB.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        StudentDB.getColumnModel().getColumn(0).setResizable(false);
        StudentDB.getColumnModel().getColumn(1).setResizable(false);
        StudentDB.getColumnModel().getColumn(2).setResizable(false);
        StudentDB.getColumnModel().getColumn(3).setResizable(false);

        Search.setText("Search by ID #");

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(View, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addComponent(jScrollPane2)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(View)
                    .addComponent(Update)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        Exit.setText("iAdvise");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Exit.add(jMenuItem1);

        jMenuBar1.add(Exit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-632)/2, (screenSize.height-493)/2, 632, 493);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
       //user can update the contents to the database      
        int row = StudentDB.getSelectedRow();
        String id = StudentRecords.get(row).getID();
        try {
            UpdateStudent window = new UpdateStudent(STUDENT_PATH, id);
            //window.setVisible(true);
            this.populateTable();
        } catch (IOException ioex) {
           JOptionPane.showMessageDialog(null,"Nothing was selected... try again", 
                        "Error",JOptionPane.ERROR_MESSAGE);
            ioex.printStackTrace();
            return;
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
       //allows for viewing of the selected row's content
        
        int row = StudentDB.getSelectedRow();
        String id = StudentRecords.get(row).getID();
        try {
            new ViewStudent(STUDENT_PATH, id);
        } catch (IOException ioex) {
            ioex.printStackTrace();
            JOptionPane.showMessageDialog(null,"Nothing was selected... try again", 
                        "Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_ViewActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
       //this will allow for user to search ID name and 
        //the box with ID in table will be highlighed.
        
        File folder = new File(STUDENT_PATH);
        File[] listOfFiles = folder.listFiles();
        boolean foundFlg = false;
        String id = Search.getText();
        System.out.println(id+"is the one searching for");
        for (int i = 0; i < listOfFiles.length; i++) {
            System.out.println(i);
            String[] fileString = listOfFiles[i].getName().split(".txt");
            String newid = fileString[0].toString();
            System.out.println(id.equals(newid));
            if(id.equals(newid)){
               System.out.println(id+"was searched "+newid+" was found");
                StudentDB.changeSelection(i, 0, true, false);
                foundFlg = true;
            }
        }
        if (!foundFlg) {
                JOptionPane.showMessageDialog(null,"Can't find ID #", 
                        "Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    public void populateTable() {
        //this will populate the table with the information from the database
        StudentRecords.clear();
        
        File folder = new File(STUDENT_PATH);
        File[] listOfFiles = folder.listFiles();
        for (int i = 0; i < listOfFiles.length; i++) {
            String fileString = listOfFiles[i].getName();
            System.out.println(fileString);
            try {
                StudentRecords.add(new StudentIO(folder+"/"+fileString));
            } catch (IOException ex) {
                System.out.println(ex.toString());
            }
        }
        this.updateTable();
    }
      private void updateTable() {
          
          //this will update the table (populateTable) uses this method to 
          //display the information (ID, First Name, Last Name, Major
    
        DefaultTableModel model = (DefaultTableModel) StudentDB.getModel();      
        model.setRowCount(0);
        for (int i = 0; i < StudentRecords.size(); i++) {
            System.out.println(i +" " + StudentRecords.get(i).getID());
            model.addRow(new Object[]{StudentRecords.get(i).getID(), 
                                      StudentRecords.get(i).getFirstName(),
                                      StudentRecords.get(i).getLastName(),
                                      StudentRecords.get(i).getMajor()});
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // System.out.println("run");
                StudentDB window = new StudentDB();
                window.setVisible(true);
                window.setLocation(500, 200);
                window.populateTable();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Exit;
    private javax.swing.JTextField Search;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTable StudentDB;
    private javax.swing.JButton Update;
    private javax.swing.JButton View;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
